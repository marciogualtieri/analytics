@startuml
interface EventRepository {
        +Future<Event> create(string user, EventKind kind, Timestamp millisecondsSinceEpoch)
        +Future<Seq<Event>> all()
        +Future<Unit> deleteAll()
        +Future<Tuple<Int, Int, Int>> counts(Long hoursSinceEpoch)
        +Future<Seq<String>> distinctUsers(Long hoursSinceEpoch)
}

class Event {
       +Event(Long id, String user, EventKind kind, Timestamp millisecondsSinceEpoch);
}

enum EventKind {
        Click
        Impression
}

class SlickEventRepository
class CachedEventRepository
class Clock {
    +Timestamp now()
    +Long currentHoursSinceEpoch()
}

class CachingActor {
        -Set<String> users;
        -Int clicks
        -Int impressions
        -Long hoursSinceEpoch
        +PartialFunction<Any, Unit> receive()
}

class UpdateCache {
    +UpdateCache(Seq<String> users, Int clicks, Int impressions, Long hoursSinceEpoch)
}
class GetCacheCounts
class GetCacheHour
class AddEventToCache {
    +AddEventToCache(String user, EventKind kind)
}

EventRepository <|-- SlickEventRepository
EventRepository <|-- CachedEventRepository

EventRepository *-- Event
EventRepository *-- EventKind

Event *-- EventKind

CachedEventRepository *-- Clock
CachedEventRepository *-- CachingActor
CachedEventRepository *-- EventRepository
CachingActor *-- UpdateCache
CachingActor *-- GetCacheCounts
CachingActor *-- GetCacheHour
CachingActor *-- AddEventToCache
@enduml